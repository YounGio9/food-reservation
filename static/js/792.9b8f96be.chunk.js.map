{"version":3,"file":"static/js/792.9b8f96be.chunk.js","mappings":"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","sources":["helpers/types.tsx","helpers/functions.tsx","components/ReservationItem.tsx","components/ReservationList.tsx","pages/admin/Reservations.tsx","pages/admin/generateFakeData.tsx"],"sourcesContent":["export interface Stepper {\n   activeStep: number\n   handleNext: (data: Reservation) => void\n   handleBack: () => void\n   addFormData: (data: Reservation) => void\n   globalData: Reservation\n   choosenDateInString: string | null\n   setDate: (date: Date) => void\n   setHour: (time: Schedule) => void\n   loading: boolean\n}\n\nexport type contextChildren =\n   | string\n   | number\n   | boolean\n   | React.ReactElement<any, string | React.JSXElementConstructor<any>>\n   | React.ReactFragment\n   | React.ReactPortal\n\nexport interface Step {\n   label: string\n   element: () => React.JSX.Element\n}\n\nexport interface Reservation extends Client {\n   adultsGuests: number\n   childrenGuests: number\n   reservationDate: string\n   reservationTime: string\n   typeOfMeal: string\n   options?: string\n   comment?: string\n}\n\nexport interface Client {\n   firstname: string\n   lastname: string\n   email: string\n   phoneNumber: number | string\n   country?: string\n}\n\nexport type Schedule =\n   | '12:00'\n   | '12:30'\n   | '13:00'\n   | '13:30'\n   | '14:00'\n   | '19:00'\n   | '19:30'\n   | '20:00'\n   | '20:30'\n   | '21:00'\n   | '21:30'\n   | '22:00'\n\nexport enum Days {\n   'Dimanche' = 0,\n   'Lundi',\n   'Mardi',\n   'Mercredi',\n   'Jeudi',\n   'Vendredi',\n   'Samedi',\n}\n\nexport enum Months {\n   'Janvier' = 0,\n   'Février',\n   'Mars',\n   'Avril',\n   'Mai',\n   'Juin',\n   'Août',\n   'Septembre',\n   'Octobre',\n   'Novembre',\n   'Décembre',\n}\n\nexport interface DaySchedule {\n   day: string\n   start: string\n   end: string\n}\n","import { types } from '.'\n\nexport function getDateInFrench(stringDate: Date): string {\n   return [\n      types.Days[stringDate.getDay()].toLocaleLowerCase(),\n      stringDate.getDate(),\n      types.Months[stringDate.getMonth()].toLocaleLowerCase(),\n      stringDate.getFullYear(),\n   ].join(' ')\n}\n","import React from 'react'\nimport { FaCheck, FaCookie, FaRestroom } from 'react-icons/fa'\n\nfunction ReservationItem() {\n   return (\n      <div className='barestho-group'>\n         <div className='barestho-group-header'>\n            <div className='barestho-flex p-1'>\n               <span className='font-bold'>18:00</span>\n               <div className=' float-right flex items-center gap-1'>\n                  2\n                  <FaCookie />5<i className='fa-solid fa-utensils'></i>\n               </div>\n            </div>\n         </div>\n         <div className='time-list'>\n            <div className='time-separator barestho-noselect'>\n               <span className='font-bold'>18:00</span>\n               <span className=' float-right flex items-center gap-1'>\n                  2\n                  <FaCookie />\n                  5\n                  <FaRestroom />\n               </span>\n            </div>\n\n            <div className='bg-white text-black'>\n               <div className='reservation-item false'>\n                  <div className='header'></div>\n                  <div className='status-group'>\n                     <FaCheck color={'#21ba45'} size={16} />\n                  </div>\n                  <div className='name primary text-ellipsis'>Marion</div>\n                  <div className='start secondary'>18:00</div>\n                  <div className='zone secondary text-ellipsis'>default</div>\n                  <div className='count primary'>\n                     3 <i aria-hidden='true' className='utensils small fitted icon'></i>\n                  </div>\n\n                  <div className='tables'>T. 6 </div>\n                  <div className='details'> </div>\n                  <div className='other'></div>\n               </div>\n            </div>\n         </div>\n      </div>\n   )\n}\n\nexport default ReservationItem\n","import React from 'react'\nimport ReservationItem from './ReservationItem'\n\nfunction ReservationList() {\n   return (\n      <div className='barestho-reservation-day-list-container'>\n         <ReservationItem />\n      </div>\n   )\n}\n\nexport default ReservationList\n","import React from 'react'\nimport 'react-calendar-timeline/lib/Timeline.css'\nimport moment from 'moment'\nimport 'moment/locale/fr'\n\nimport Timeline, {\n   TimelineHeaders,\n   SidebarHeader,\n   DateHeader,\n   TimelineItemBase,\n   TodayMarker,\n} from 'react-calendar-timeline'\nimport generateFakeData from './generateFakeData'\nimport ReservationList from '../../components/ReservationList'\nimport { Modal } from 'antd'\nimport { IoList } from 'react-icons/io5'\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi'\nimport { getDateInFrench } from '../../helpers/functions'\nimport { FaUser } from 'react-icons/fa'\n\nvar keys = {\n   groupIdKey: 'id',\n   groupTitleKey: 'title',\n   groupRightTitleKey: 'rightTitle',\n   itemIdKey: 'id',\n   itemTitleKey: 'title',\n   itemDivTitleKey: 'title',\n   itemGroupKey: 'group',\n   itemTimeStartKey: 'start_time',\n   itemTimeEndKey: 'end_time',\n   groupLabelKey: 'title',\n}\n\nexport default function Reservations() {\n   const { groups } = generateFakeData(150, 150, 1)\n\n   const [isModalOpen, setIsModalOpen] = React.useState<boolean>(false)\n   // eslint-disable-next-line\n   const [activeItemData, setActiveItemData] = React.useState({})\n   const [isOpenReservationList, setIsOpenReservationList] = React.useState<boolean>(false)\n\n   const [timeStart, setTimeStart] = React.useState<moment.Moment>(moment())\n\n   const handleNext = () => {\n      setTimeStart((prev) => prev.clone().add(1, 'day'))\n   }\n\n   const handleBack = () => {\n      setTimeStart((prev) => prev.clone().subtract(1, 'day'))\n   }\n\n   React.useEffect(() => {\n      console.log(timeStart.clone().startOf('day').toDate())\n      console.log(timeStart.clone().endOf('day').toDate())\n   }, [timeStart])\n\n   const events: TimelineItemBase<any>[] = [\n      {\n         id: 1,\n         title: (\n            <div className='p-0 w-full h-full flex flex-col'>\n               <span>event</span>\n               <span className='flex items-center justify-end w-full text-xs'>\n                  {' '}\n                  2<FaUser />{' '}\n               </span>\n            </div>\n         ),\n         start_time: new Date('2023 6 8 10:00'),\n         end_time: new Date('2023 6 8 12:00'),\n         group: 2,\n         className: 'event',\n\n         // Today at 10 PM\n      },\n   ]\n\n   return (\n      <div className='flex flex-col'>\n         <div className='w-full flex items-center justify-center mt-5'>\n            <div className=' w-72 bg-[#dc0044] flex rounded-full justify-between items-center p-2 text-base'>\n               <button className=' hover:opacity-50' onClick={handleBack}>\n                  <FiChevronLeft />\n               </button>\n\n               <button className=' hover:opacity-50 font-bold'>\n                  {getDateInFrench(timeStart.toDate())}\n               </button>\n\n               <button className=' hover:opacity-50' onClick={handleNext}>\n                  <FiChevronRight />\n               </button>\n            </div>\n         </div>\n\n         <div className='flex mt-5 justify-center'>\n            <Modal\n               className='relative'\n               title='Réservation'\n               width={800}\n               cancelText={'Fermer'}\n               centered\n               onCancel={() => setIsModalOpen(false)}\n               open={isModalOpen}\n            >\n               <hr className='absolute top-14 border-t border-grey w-full left-0' />\n               <p className=' mb-1 mt-6 text-xl font-semibold leading-none'>Dubois Sophie</p>\n               <p className='text-[#808080] my-1'>sofinic@hotmail.com</p>\n               <p className='text-[#808080] '>+32 475 27 49 34</p>\n\n               <p className='flex flex-wrap text-base mb-4'>\n                  <p className=' basis-1/3'> samedi 10 juin 2023</p>\n                  <p className=' basis-1/3'> 18:30</p>\n                  <p className=' basis-1/3'>2 (2 adultes)</p>\n                  <p className=' basis-1/3'> Moment détente</p>\n                  <p className=' basis-1/3'> default</p>\n               </p>\n               <p className='border-b border-grey pb-3'>Si possible en terrasse </p>\n               <p className=' text-[#dc0044]'>Table</p>\n            </Modal>\n            {isOpenReservationList && (\n               <div className='barestho-scrollable reservations-list mr-4 w-72'>\n                  <ReservationList />\n               </div>\n            )}\n            <div className='bg-white w-3/4'>\n               <div className='w-full'>\n                  <Timeline\n                     groups={groups}\n                     items={events as TimelineItemBase<any>[]}\n                     keys={keys}\n                     itemTouchSendsClick={false}\n                     stackItems\n                     itemHeightRatio={0.75}\n                     onItemSelect={(id, e, time) => {\n                        console.log(id, e, time)\n                        setActiveItemData({\n                           e,\n                           id,\n                           time,\n                        })\n                        setIsModalOpen(true)\n                     }}\n                     canMove={false}\n                     lineHeight={47}\n                     buffer={1}\n                     // minResizeWidth={}\n\n                     canResize={false}\n                     visibleTimeStart={timeStart.clone().startOf('day').toDate()}\n                     visibleTimeEnd={timeStart.clone().endOf('day').toDate()}\n                  >\n                     <TodayMarker date={moment().toDate()} />\n                     <TimelineHeaders className='sticky'>\n                        <SidebarHeader>\n                           {({ getRootProps }) => {\n                              return (\n                                 <div\n                                    className='rct-sidebar-header flex items-center justify-center'\n                                    {...getRootProps()}\n                                 >\n                                    <button\n                                       className='border-2 border-white p-2 rounded-full'\n                                       onClick={() =>\n                                          setIsOpenReservationList(!isOpenReservationList)\n                                       }\n                                    >\n                                       <IoList size={23} />\n                                    </button>\n                                 </div>\n                              )\n                           }}\n                        </SidebarHeader>\n                        <DateHeader unit='primaryHeader' className='rct-primary' />\n                        <DateHeader className='rct-label' />\n                     </TimelineHeaders>\n                  </Timeline>\n               </div>\n            </div>\n         </div>\n      </div>\n   )\n}\n\n// import { Button } from '@mui/material'\n// import React from 'react'\n// import Loading from '../../components/UI/Loading'\n// import { types } from '../../helpers'\n// import client from '../../helpers/client'\n// import { Scheduler } from '@aldabil/react-scheduler'\n// import { ProcessedEvent } from '@aldabil/react-scheduler/types'\n\n// function Reservations() {\n//    const [data, setData] = React.useState<ProcessedEvent[]>([])\n//    const [loading, setLoading] = React.useState<boolean>(false)\n\n//    const getEndTime = (time: types.Schedule): string => {\n//       const start = time.slice(0, 2)\n//       const end = time.slice(3, 5)\n\n//       switch (end) {\n//          case '00':\n//             return `${start}:${30}`\n//          case '30':\n//             return `${+start + 1}:00`\n//          default:\n//             return time\n//       }\n//    }\n\n//    console.log(getEndTime('14:00'))\n//    const getReservations = async () => {\n//       setLoading(true)\n//       const data = await client.get('/reservations')\n//       console.log(data.data.data)\n\n//       setData(\n//          data.data.data.map(\n//             (res: any, idx: number): ProcessedEvent => ({\n//                event_id: idx,\n//                title: res.client + '\\n' + res.numberOfGuests,\n//                start: new Date(\n//                   res.reservationDate.split('/').reverse().join(' ') +\n//                      ' ' +\n//                      res.reservationTime,\n//                ),\n//                end: new Date(\n//                   [\n//                      ...res.reservationDate.split('/').reverse(),\n//                      getEndTime(res.reservationTime),\n//                   ].join(' '),\n//                ),\n//             }),\n//          ),\n//       )\n\n//       setLoading(false)\n//    }\n\n//    React.useMemo(() => {\n//       console.log(data)\n//    }, [data])\n\n//    React.useEffect(() => {\n//       getReservations()\n\n//       // eslint-disable-next-line\n//    }, [])\n\n//    return loading ? (\n//       <Loading />\n//    ) : (\n//       <div className='text-black h-full overflow-scroll'>\n//          <Scheduler\n//             editable={false}\n//             deletable={false}\n//             events={data}\n//             view='week'\n//             day={{\n//                startHour: 11,\n//                endHour: 23,\n//                step: 60,\n//                cellRenderer: ({ height, start, onClick, ...props }) => {\n//                   // Fake some condition up\n//                   const hour = start.getHours()\n//                   const minutes = start.getMinutes()\n//                   const disabled = [15, 16, 17, 18].includes(hour)\n//                   const restProps = disabled ? {} : props\n//                   return (\n//                      <Button\n//                         style={{\n//                            height: '100%',\n//                            background:\n//                               disabled || (hour === 14 && minutes === 30)\n//                                  ? '#eee'\n//                                  : 'transparent',\n//                            cursor: disabled ? 'not-allowed' : 'pointer',\n//                         }}\n//                         onClick={() => {\n//                            if (disabled) {\n//                               return alert('Feeling Food est fermé de 14h à 19h')\n//                            }\n//                            onClick()\n//                         }}\n//                         disableRipple={disabled}\n//                         {...restProps}\n//                      ></Button>\n//                   )\n//                },\n//             }}\n//             week={{\n//                weekDays: [0, 3, 4, 5, 6],\n//                step: 30,\n//                weekStartOn: 6,\n//                startHour: 11,\n//                endHour: 23,\n//                cellRenderer: ({ height, start, onClick, ...props }) => {\n//                   // Fake some condition up\n//                   const hour = start.getHours()\n//                   const minutes = start.getMinutes()\n//                   const disabled = [15, 16, 17, 18].includes(hour)\n//                   const restProps = disabled ? {} : props\n//                   return (\n//                      <Button\n//                         style={{\n//                            height: '100%',\n//                            background:\n//                               disabled || (hour === 14 && minutes === 30)\n//                                  ? '#eee'\n//                                  : 'transparent',\n//                            cursor: disabled ? 'not-allowed' : 'pointer',\n//                         }}\n//                         onClick={() => {\n//                            if (disabled) {\n//                               return alert('Feeling Food est fermé de 14h à 19h')\n//                            }\n//                            onClick()\n//                         }}\n//                         disableRipple={disabled}\n//                         {...restProps}\n//                      ></Button>\n//                   )\n//                },\n//             }}\n//             month={{\n//                weekDays: [0, 2, 3, 4, 5, 6],\n//                weekStartOn: 6,\n//                startHour: 11,\n//                endHour: 23,\n//                cellRenderer: ({ height, start, onClick, ...props }) => {\n//                   // Fake some condition up\n//                   const hour = start.getHours()\n//                   const minutes = start.getMinutes()\n//                   const disabled = [15, 16, 17, 18].includes(hour)\n//                   const restProps = disabled ? {} : props\n//                   return (\n//                      <Button\n//                         style={{\n//                            height: '100%',\n//                            background:\n//                               disabled || (hour === 14 && minutes === 30)\n//                                  ? '#eee'\n//                                  : 'transparent',\n//                            cursor: disabled ? 'not-allowed' : 'pointer',\n//                         }}\n//                         onClick={() => {\n//                            if (disabled) {\n//                               return alert('Feeling Food est fermé de 14h à 19h')\n//                            }\n//                            onClick()\n//                         }}\n//                         disableRipple={disabled}\n//                         {...restProps}\n//                      ></Button>\n//                   )\n//                },\n//             }}\n//          />\n//       </div>\n//    )\n// }\n\n// export default Reservations\n","import { faker } from '@faker-js/faker'\nimport moment from 'moment'\nimport { FaUsers } from 'react-icons/fa'\nimport { TimelineGroupBase, TimelineItemBase } from 'react-calendar-timeline'\nimport tables from '../../db/tables.json'\n\nexport default function generateFakeData(groupCount = 30, itemCount = 1000, daysInPast = 30) {\n   let groups: TimelineGroupBase[] = []\n   for (let i = 0; i < tables.length; i++) {\n      groups.push({\n         id: `${i + 1}`,\n         title: (\n            <div className='barestho-timeline-group-container'>\n               <p className='barestho-timeline-group-name'>Table {tables[i].name}</p>\n               <div className='barestho-timeline-group-seats flex items-center gap-1'>\n                  <FaUsers />\n                  {tables[i].places}\n               </div>\n            </div>\n         ),\n         // rightTitle: faker.name.lastName(),\n      })\n   }\n   let items: TimelineItemBase<number>[] = []\n   for (let i = 0; i < itemCount; i++) {\n      const startDate =\n         faker.date.recent(daysInPast).valueOf() + daysInPast * 0.3 * 86400 * 1000\n\n      items.push({\n         id: i + '',\n         group: faker.datatype.number({ min: 1, max: groups.length }) + '',\n         title: <p className='bg-green'></p>,\n         start_time: new Date().setHours(21, 0, 0), // Today at 9 PM\n         end_time: new Date().setHours(22, 0, 0), //\n         // canMove: startValue > new Date().getTime(),\n         // canResize: startValue > new Date().getTime() ? (endValue > new Date().getTime() ? 'both' : 'left') : (endValue > new Date().getTime() ? 'right' : false),\n         className:\n            moment(startDate).day() === 6 || moment(startDate).day() === 0\n               ? 'item-weekend'\n               : '',\n      })\n   }\n\n   items = items.sort((a: any, b: any) => b - a)\n\n   return { groups, items }\n}\n"],"names":["Days","Months","getDateInFrench","stringDate","types","getDay","toLocaleLowerCase","getDate","getMonth","getFullYear","join","_jsxs","className","children","_jsx","FaCookie","FaRestroom","FaCheck","color","size","ReservationItem","keys","groupIdKey","groupTitleKey","groupRightTitleKey","itemIdKey","itemTitleKey","itemDivTitleKey","itemGroupKey","itemTimeStartKey","itemTimeEndKey","groupLabelKey","Reservations","_generateFakeData","itemCount","arguments","length","undefined","daysInPast","groups","i","tables","push","id","concat","title","name","FaUsers","places","items","startDate","faker","valueOf","group","min","max","start_time","Date","setHours","end_time","moment","day","sort","a","b","generateFakeData","_React$useState","React","_React$useState2","_slicedToArray","isModalOpen","setIsModalOpen","_React$useState3","_React$useState4","setActiveItemData","_React$useState5","_React$useState6","isOpenReservationList","setIsOpenReservationList","_React$useState7","_React$useState8","timeStart","setTimeStart","console","log","clone","startOf","toDate","endOf","events","FaUser","onClick","prev","subtract","FiChevronLeft","add","FiChevronRight","Modal","width","cancelText","centered","onCancel","open","ReservationList","Timeline","itemTouchSendsClick","stackItems","itemHeightRatio","onItemSelect","e","time","canMove","lineHeight","buffer","canResize","visibleTimeStart","visibleTimeEnd","TodayMarker","date","TimelineHeaders","SidebarHeader","_ref","getRootProps","_objectSpread","IoList","DateHeader","unit"],"sourceRoot":""}